const express = require('express');
const cors = require('cors');
const dotenv = require('dotenv');
const jwt = require('jsonwebtoken');
const bcrypt = require('bcryptjs');
const { Sequelize, DataTypes } = require('sequelize');

dotenv.config();
const app = express();

app.use(cors());
app.use(express.json());

// SQLite Database Setup
const sequelize = new Sequelize({
  dialect: 'sqlite',
  storage: process.env.DATABASE_PATH || './deliverhub.db',
  logging: false
});

// User Model
const User = sequelize.define('User', {
  name: {
    type: DataTypes.STRING,
    allowNull: false
  },
  email: {
    type: DataTypes.STRING,
    allowNull: false,
    unique: true
  },
  password: {
    type: DataTypes.STRING,
    allowNull: false
  },
  role: {
    type: DataTypes.ENUM('customer', 'driver'),
    allowNull: false
  },
  rating: {
    type: DataTypes.FLOAT,
    defaultValue: 5
  },
  completedDeliveries: {
    type: DataTypes.INTEGER,
    defaultValue: 0
  }
});

// Order Model
const Order = sequelize.define('Order', {
  title: DataTypes.STRING,
  description: DataTypes.TEXT,
  fromLat: DataTypes.FLOAT,
  fromLng: DataTypes.FLOAT,
  fromName: DataTypes.STRING,
  toLat: DataTypes.FLOAT,
  toLng: DataTypes.FLOAT,
  toName: DataTypes.STRING,
  price: DataTypes.FLOAT,
  status: {
    type: DataTypes.ENUM('open', 'accepted', 'completed'),
    defaultValue: 'open'
  },
  bids: {
    type: DataTypes.TEXT,
    defaultValue: '[]',
    get() {
      const raw = this.getDataValue('bids');
      return raw ? JSON.parse(raw) : [];
    },
    set(value) {
      this.setDataValue('bids', JSON.stringify(value));
    }
  },
  customerId: DataTypes.STRING,
  customerName: DataTypes.STRING,
  assignedDriver: {
    type: DataTypes.TEXT,
    get() {
      const raw = this.getDataValue('assignedDriver');
      return raw ? JSON.parse(raw) : null;
    },
    set(value) {
      this.setDataValue('assignedDriver', JSON.stringify(value));
    }
  }
});

// Initialize Database
sequelize.sync().then(() => {
  console.log('✅ SQLite Database connected');
}).catch(err => {
  console.error('❌ Database error:', err);
});

const JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';

// Middleware
const verifyToken = (req, res, next) => {
  const token = req.headers['authorization']?.split(' ')[1];
  if (!token) return res.status(401).json({ error: 'No token provided' });
  try {
    const decoded = jwt.verify(token, JWT_SECRET);
    req.user = decoded;
    next();
  } catch (error) {
    res.status(401).json({ error: 'Invalid or expired token' });
  }
};

// Routes

// Register
app.post('/api/auth/register', async (req, res) => {
  try {
    const { name, email, password, role } = req.body;
    if (!name || !email || !password || !role) {
      return res.status(400).json({ error: 'All fields required' });
    }
    
    const existingUser = await User.findOne({ where: { email } });
    if (existingUser) {
      return res.status(400).json({ error: 'Email already registered' });
    }
    
    const hashedPassword = await bcrypt.hash(password, 10);
    const user = await User.create({ name, email, password: hashedPassword, role });
    
    const token = jwt.sign(
      { userId: user.id, email: user.email, name: user.name, role: user.role },
      JWT_SECRET,
      { expiresIn: '30d' }
    );
    
    res.json({
      message: 'User registered successfully',
      token,
      user: { id: user.id, name: user.name, email: user.email, role: user.role }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Registration failed' });
  }
});

// Login
app.post('/api/auth/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    if (!email || !password) {
      return res.status(400).json({ error: 'Email and password required' });
    }
    
    const user = await User.findOne({ where: { email } });
    if (!user) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }
    
    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(401).json({ error: 'Invalid email or password' });
    }
    
    const token = jwt.sign(
      { userId: user.id, email: user.email, name: user.name, role: user.role },
      JWT_SECRET,
      { expiresIn: '30d' }
    );
    
    res.json({
      message: 'Login successful',
      token,
      user: {
        id: user.id,
        name: user.name,
        email: user.email,
        role: user.role,
        rating: user.rating,
        completedDeliveries: user.completedDeliveries
      }
    });
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Login failed' });
  }
});

// Get current user
app.get('/api/auth/me', verifyToken, async (req, res) => {
  try {
    const user = await User.findByPk(req.user.userId);
    res.json({
      id: user.id,
      name: user.name,
      email: user.email,
      role: user.role,
      rating: user.rating,
      completedDeliveries: user.completedDeliveries
    });
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch user' });
  }
});

// Create Order
app.post('/api/orders', verifyToken, async (req, res) => {
  try {
    const { title, description, from, to, price } = req.body;
    const order = await Order.create({
      title,
      description,
      fromLat: from.lat,
      fromLng: from.lng,
      fromName: from.name,
      toLat: to.lat,
      toLng: to.lng,
      toName: to.name,
      price,
      customerId: req.user.userId.toString(),
      customerName: req.user.name
    });
    
    const formattedOrder = {
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    };
    
    res.json(formattedOrder);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to create order' });
  }
});

// Get all orders
app.get('/api/orders', verifyToken, async (req, res) => {
  try {
    const orders = await Order.findAll({ order: [['createdAt', 'DESC']] });
    
    const formattedOrders = orders.map(order => ({
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    }));
    
    res.json(formattedOrders);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to fetch orders' });
  }
});

// Get single order
app.get('/api/orders/:id', verifyToken, async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    if (!order) return res.status(404).json({ error: 'Order not found' });
    
    const formattedOrder = {
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    };
    
    res.json(formattedOrder);
  } catch (error) {
    res.status(500).json({ error: 'Failed to fetch order' });
  }
});

// Place bid
app.post('/api/orders/:id/bid', verifyToken, async (req, res) => {
  try {
    const { bidPrice } = req.body;
    const order = await Order.findByPk(req.params.id);
    
    if (!order) return res.status(404).json({ error: 'Order not found' });
    
    let bids = order.bids;
    bids = bids.filter(bid => bid.userId !== req.user.userId.toString());
    bids.push({
      userId: req.user.userId.toString(),
      driverName: req.user.name,
      bidPrice
    });
    
    order.bids = bids;
    await order.save();
    
    const formattedOrder = {
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    };
    
    res.json(formattedOrder);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to place bid' });
  }
});

// Accept bid
app.post('/api/orders/:id/accept-bid', verifyToken, async (req, res) => {
  try {
    const { userId } = req.body;
    const order = await Order.findByPk(req.params.id);
    
    if (!order) return res.status(404).json({ error: 'Order not found' });
    if (order.customerId !== req.user.userId.toString()) {
      return res.status(403).json({ error: 'Only customer can accept bids' });
    }
    
    const bid = order.bids.find(b => b.userId === userId);
    if (!bid) return res.status(404).json({ error: 'Bid not found' });
    
    order.status = 'accepted';
    order.assignedDriver = bid;
    await order.save();
    
    const formattedOrder = {
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    };
    
    res.json(formattedOrder);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to accept bid' });
  }
});

// Complete order
app.post('/api/orders/:id/complete', verifyToken, async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    
    if (!order) return res.status(404).json({ error: 'Order not found' });
    if (order.assignedDriver?.userId !== req.user.userId.toString()) {
      return res.status(403).json({ error: 'Only assigned driver can complete order' });
    }
    
    order.status = 'completed';
    await order.save();
    
    const user = await User.findByPk(req.user.userId);
    user.completedDeliveries += 1;
    await user.save();
    
    const formattedOrder = {
      _id: order.id,
      title: order.title,
      description: order.description,
      from: { lat: order.fromLat, lng: order.fromLng, name: order.fromName },
      to: { lat: order.toLat, lng: order.toLng, name: order.toName },
      price: order.price,
      status: order.status,
      bids: order.bids,
      customerId: order.customerId,
      customerName: order.customerName,
      assignedDriver: order.assignedDriver
    };
    
    res.json(formattedOrder);
  } catch (error) {
    console.error(error);
    res.status(500).json({ error: 'Failed to complete order' });
  }
});

// Delete order
app.delete('/api/orders/:id', verifyToken, async (req, res) => {
  try {
    const order = await Order.findByPk(req.params.id);
    if (!order) return res.status(404).json({ error: 'Order not found' });
    if (order.customerId !== req.user.userId.toString()) {
      return res.status(403).json({ error: 'Only customer can delete order' });
    }
    await order.destroy();
    res.json({ message: 'Order deleted' });
  } catch (error) {
    res.status(500).json({ error: 'Failed to delete order' });
  }
});

// Health check
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'Backend server is running',
    database: 'SQLite',
    version: '1.0.0'
  });
});

const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`✅ Server running on http://localhost:${PORT}`);
  console.log(`📍 Backend API: http://localhost:${PORT}/api`);
  console.log(`💾 Database: SQLite (deliverhub.db)`);
});